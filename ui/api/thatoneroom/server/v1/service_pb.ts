// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file thatoneroom/server/v1/service.proto (package thatoneroom.server.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum thatoneroom.server.v1.Direction
 */
export enum Direction {
  /**
   * @generated from enum value: UP = 0;
   */
  UP = 0,

  /**
   * @generated from enum value: DOWN = 1;
   */
  DOWN = 1,

  /**
   * @generated from enum value: LEFT = 2;
   */
  LEFT = 2,

  /**
   * @generated from enum value: RIGHT = 3;
   */
  RIGHT = 3,

  /**
   * @generated from enum value: STOP = 4;
   */
  STOP = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Direction)
proto3.util.setEnumType(Direction, "thatoneroom.server.v1.Direction", [
  { no: 0, name: "UP" },
  { no: 1, name: "DOWN" },
  { no: 2, name: "LEFT" },
  { no: 3, name: "RIGHT" },
  { no: 4, name: "STOP" },
]);

/**
 * @generated from message thatoneroom.server.v1.ConnectRequest
 */
export class ConnectRequest extends Message<ConnectRequest> {
  constructor(data?: PartialMessage<ConnectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thatoneroom.server.v1.ConnectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectRequest {
    return new ConnectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectRequest | PlainMessage<ConnectRequest> | undefined, b: ConnectRequest | PlainMessage<ConnectRequest> | undefined): boolean {
    return proto3.util.equals(ConnectRequest, a, b);
  }
}

/**
 * @generated from message thatoneroom.server.v1.ConnectResponse
 */
export class ConnectResponse extends Message<ConnectResponse> {
  constructor(data?: PartialMessage<ConnectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thatoneroom.server.v1.ConnectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectResponse {
    return new ConnectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectResponse {
    return new ConnectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectResponse | PlainMessage<ConnectResponse> | undefined, b: ConnectResponse | PlainMessage<ConnectResponse> | undefined): boolean {
    return proto3.util.equals(ConnectResponse, a, b);
  }
}

/**
 * @generated from message thatoneroom.server.v1.Request
 */
export class Request extends Message<Request> {
  /**
   * @generated from oneof thatoneroom.server.v1.Request.action
   */
  action: {
    /**
     * @generated from field: thatoneroom.server.v1.Move move = 1;
     */
    value: Move;
    case: "move";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thatoneroom.server.v1.Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "move", kind: "message", T: Move, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Request {
    return new Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Request {
    return new Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Request {
    return new Request().fromJsonString(jsonString, options);
  }

  static equals(a: Request | PlainMessage<Request> | undefined, b: Request | PlainMessage<Request> | undefined): boolean {
    return proto3.util.equals(Request, a, b);
  }
}

/**
 * @generated from message thatoneroom.server.v1.Response
 */
export class Response extends Message<Response> {
  /**
   * @generated from oneof thatoneroom.server.v1.Response.action
   */
  action: {
    /**
     * @generated from field: thatoneroom.server.v1.UpdateEntity updateEntity = 2;
     */
    value: UpdateEntity;
    case: "updateEntity";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thatoneroom.server.v1.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "updateEntity", kind: "message", T: UpdateEntity, oneof: "action" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response {
    return new Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJsonString(jsonString, options);
  }

  static equals(a: Response | PlainMessage<Response> | undefined, b: Response | PlainMessage<Response> | undefined): boolean {
    return proto3.util.equals(Response, a, b);
  }
}

/**
 * @generated from message thatoneroom.server.v1.Move
 */
export class Move extends Message<Move> {
  /**
   * @generated from field: thatoneroom.server.v1.Direction direction = 1;
   */
  direction = Direction.UP;

  constructor(data?: PartialMessage<Move>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thatoneroom.server.v1.Move";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "direction", kind: "enum", T: proto3.getEnumType(Direction) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Move {
    return new Move().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Move {
    return new Move().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Move {
    return new Move().fromJsonString(jsonString, options);
  }

  static equals(a: Move | PlainMessage<Move> | undefined, b: Move | PlainMessage<Move> | undefined): boolean {
    return proto3.util.equals(Move, a, b);
  }
}

/**
 * @generated from message thatoneroom.server.v1.Entity
 */
export class Entity extends Message<Entity> {
  /**
   * @generated from oneof thatoneroom.server.v1.Entity.entity
   */
  entity: {
    /**
     * @generated from field: thatoneroom.server.v1.Player player = 1;
     */
    value: Player;
    case: "player";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Entity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thatoneroom.server.v1.Entity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player", kind: "message", T: Player, oneof: "entity" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entity {
    return new Entity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJsonString(jsonString, options);
  }

  static equals(a: Entity | PlainMessage<Entity> | undefined, b: Entity | PlainMessage<Entity> | undefined): boolean {
    return proto3.util.equals(Entity, a, b);
  }
}

/**
 * @generated from message thatoneroom.server.v1.Player
 */
export class Player extends Message<Player> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: thatoneroom.server.v1.Coordinate position = 3;
   */
  position?: Coordinate;

  constructor(data?: PartialMessage<Player>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thatoneroom.server.v1.Player";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "position", kind: "message", T: Coordinate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Player {
    return new Player().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJsonString(jsonString, options);
  }

  static equals(a: Player | PlainMessage<Player> | undefined, b: Player | PlainMessage<Player> | undefined): boolean {
    return proto3.util.equals(Player, a, b);
  }
}

/**
 * @generated from message thatoneroom.server.v1.Coordinate
 */
export class Coordinate extends Message<Coordinate> {
  /**
   * @generated from field: int32 x = 1;
   */
  x = 0;

  /**
   * @generated from field: int32 y = 2;
   */
  y = 0;

  constructor(data?: PartialMessage<Coordinate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thatoneroom.server.v1.Coordinate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coordinate {
    return new Coordinate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coordinate {
    return new Coordinate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coordinate {
    return new Coordinate().fromJsonString(jsonString, options);
  }

  static equals(a: Coordinate | PlainMessage<Coordinate> | undefined, b: Coordinate | PlainMessage<Coordinate> | undefined): boolean {
    return proto3.util.equals(Coordinate, a, b);
  }
}

/**
 * @generated from message thatoneroom.server.v1.UpdateEntity
 */
export class UpdateEntity extends Message<UpdateEntity> {
  /**
   * @generated from field: thatoneroom.server.v1.Entity entity = 1;
   */
  entity?: Entity;

  constructor(data?: PartialMessage<UpdateEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "thatoneroom.server.v1.UpdateEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity", kind: "message", T: Entity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEntity {
    return new UpdateEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEntity {
    return new UpdateEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEntity {
    return new UpdateEntity().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEntity | PlainMessage<UpdateEntity> | undefined, b: UpdateEntity | PlainMessage<UpdateEntity> | undefined): boolean {
    return proto3.util.equals(UpdateEntity, a, b);
  }
}

